apiVersion: v1
kind: Namespace
metadata:
  name: local-path-storage
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: local-path-provisioner-service-account
  namespace: local-path-storage
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: local-path-provisioner-role
rules:
- apiGroups: [""]
  resources: ["nodes", "persistentvolumeclaims"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["endpoints", "persistentvolumes", "pods"]
  verbs: ["*"]
- apiGroups: [""]
  resources: ["events"]
  verbs: ["create", "patch"]
- apiGroups: ["storage.k8s.io"]
  resources: ["storageclasses"]
  verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: local-path-provisioner-bind
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: local-path-provisioner-role
subjects:
- kind: ServiceAccount
  name: local-path-provisioner-service-account
  namespace: local-path-storage
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: local-path-provisioner
  namespace: local-path-storage
spec:
  replicas: 1
  selector:
    matchLabels:
      app: local-path-provisioner
  template:
    metadata:
      labels:
        app: local-path-provisioner
    spec:
      serviceAccountName: local-path-provisioner-service-account
      containers:
      - name: local-path-provisioner
        image: rancher/local-path-provisioner:v0.0.17
        imagePullPolicy: IfNotPresent
        command:
        - local-path-provisioner
        - --debug
        - start
        - --config
        - /etc/config/config.json
        - --service-account-name
        - local-path-provisioner-service-account
        - --provisioner-name
        - rancher.io/local-path
        - --helper-image
        - busybox:latest
        - --configmap-name
        - local-path-config
        volumeMounts:
        - name: config-volume
          mountPath: /etc/config/
        env:
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
      volumes:
        - name: config-volume
          configMap:
            name: local-path-config
---
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: local-path
provisioner: rancher.io/local-path
volumeBindingMode: WaitForFirstConsumer
reclaimPolicy: Delete
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: local-path-config
  namespace: local-path-storage
data:
  config.json: |-
        {
                "nodePathMap":[
                {
                        "node":"DEFAULT_PATH_FOR_NON_LISTED_NODES",
                        "paths":["/opt/local-path-provisioner"]
                }
                ]
        }
  setup: |-
        #!/bin/sh
        type=$1
        path=$2
        size=$3
        if [ "${type}" == "Filesystem" ]; then
          mkdir -m 0777 -p ${path}
        elif [ "${type}" == "Block" ]; then
          filepath="${path}-file"
          LODEVICE=$(losetup -f)
          truncate -s ${size} ${filepath}
          chmod 666 ${filepath}
          losetup ${LODEVICE} ${filepath}
          ln -s  ${LODEVICE} ${path}
        fi
  teardown: |-
        #!/bin/sh
        type=$1
        path=$2
        if [ "${type}" == "Filesystem" ]; then
          rm -rf ${path}
        elif [ "${type}" == "Block" ]; then
          filepath="${path}-file"
          // We need to use the first part of the string as losetup in busybox cuts off the full path
          filepathfrontmost=$(echo ${filepath} | awk -F '_' '{print $1}')
          // busybox losetup does not have -j flag, we have to simulate it:
          LODEVICE=$(losetup -a | grep ${filepathfrontmost} | awk -F ':' '{print $1}')
          losetup -d ${LODEVICE}
          rm -rf ${filepath}
          rm -rf ${path}
        fi

